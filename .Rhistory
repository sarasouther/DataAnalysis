"Plant" = "#18DDC2FF",
"Pollinator" = "#00468BFF"
)) +
theme_dag() +
labs(
title = "Hypothesized DAG for Pollinator Response to IVM Treatment",
color = "Variable Type"
)
library(dagitty)
library(ggdag)
library(tidyverse)
# Define the DAG
ivm_dag <- dagitty("
dag {
Treatment
Soil_Substrate
Cattle
Plant_Richness
Plant_Cover
Plant_Height
Ceanothus
Woody_Debris
Pollinator_Richness
Pollinator_Abundance
Treatment -> Plant_Richness
Treatment -> Plant_Cover
Treatment -> Plant_Height
Treatment -> Ceanothus
Treatment -> Woody_Debris
Soil_Substrate -> Treatment
Soil_Substrate -> Plant_Richness
Soil_Substrate -> Plant_Cover
Soil_Substrate -> Woody_Debris
Cattle -> Plant_Richness
Cattle -> Plant_Cover
Cattle -> Pollinator_Abundance
Cattle -> Pollinator_Richness
Plant_Richness -> Pollinator_Richness
Plant_Richness -> Pollinator_Abundance
Plant_Cover -> Pollinator_Richness
Plant_Cover -> Pollinator_Abundance
Plant_Height -> Pollinator_Richness
Plant_Height -> Pollinator_Abundance
Ceanothus -> Pollinator_Richness
Ceanothus -> Pollinator_Abundance
Woody_Debris -> Pollinator_Richness
Woody_Debris -> Pollinator_Abundance
}
")
# Assign node roles for aesthetics
node_roles <- tibble(
name = names(dagitty::coordinates(ivm_dag)),
role = c(
"Treatment",     # Treatment
"Context",       # Soil_Substrate
"Context",       # Cattle
rep("Plant", 5), # Plant traits
rep("Pollinator", 2)  # Outcomes
)
)
library(dagitty)
library(ggdag)
library(tidyverse)
# Define the DAG
ivm_dag <- dagitty("
dag {
Treatment
Soil_Substrate
Cattle
Plant_Richness
Plant_Cover
Plant_Height
Ceanothus
Woody_Debris
Pollinator_Richness
Pollinator_Abundance
Treatment -> Plant_Richness
Treatment -> Plant_Cover
Treatment -> Plant_Height
Treatment -> Ceanothus
Treatment -> Woody_Debris
Soil_Substrate -> Treatment
Soil_Substrate -> Plant_Richness
Soil_Substrate -> Plant_Cover
Soil_Substrate -> Woody_Debris
Cattle -> Plant_Richness
Cattle -> Plant_Cover
Cattle -> Pollinator_Abundance
Cattle -> Pollinator_Richness
Plant_Richness -> Pollinator_Richness
Plant_Richness -> Pollinator_Abundance
Plant_Cover -> Pollinator_Richness
Plant_Cover -> Pollinator_Abundance
Plant_Height -> Pollinator_Richness
Plant_Height -> Pollinator_Abundance
Ceanothus -> Pollinator_Richness
Ceanothus -> Pollinator_Abundance
Woody_Debris -> Pollinator_Richness
Woody_Debris -> Pollinator_Abundance
}
")
node_roles <- tibble(
name = c(
"Treatment",
"Soil_Substrate",
"Cattle",
"Plant_Richness",
"Plant_Cover",
"Plant_Height",
"Ceanothus",
"Woody_Debris",
"Pollinator_Richness",
"Pollinator_Abundance"
),
role = c(
"Treatment",
"Context",
"Context",
"Plant",
"Plant",
"Plant",
"Plant",
"Plant",
"Pollinator",
"Pollinator"
)
)
# Get layout and merge roles
dag_df <- tidy_dagitty(ivm_dag, layout = "nicely") %>%
left_join(node_roles, by = "name")
# Plot using ggplot2 with corrected edge structure
ggplot() +
geom_segment(
data = dag_df %>% filter(!is.na(xend)),
aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = "grey40"
) +
geom_point(
data = dag_df %>% filter(!is.na(x)),
aes(x = x, y = y, color = role),
size = 8, alpha = 0.85
) +
geom_text(
data = dag_df %>% filter(!is.na(x)),
aes(x = x, y = y, label = name),
color = "black", size = 4
) +
scale_color_manual(values = c(
"Treatment" = "#FB7E21FF",
"Context" = "#A91601FF",
"Plant" = "#18DDC2FF",
"Pollinator" = "#00468BFF"
)) +
labs(
title = "Hypothesized DAG for Pollinator Response to IVM Treatment",
color = "Variable Type"
) +
theme_void()
adjustmentSets(ivm_dag, exposure = "Treatment", outcome = "Pollinator_Richness")
adjustmentSets(ivm_dag, exposure = "Treatment", outcome = "Pollinator_Richness")
adjustmentSets(ivm_dag, exposure = "Treatment", outcome = "Pollinator_Abundance")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# Load required libraries
library(lavaan)
library(AICcmodavg)
# Fully Mediated Model
fullMedModel <- '
firesev ~ age
cover ~ firesev
'
fullMedSEM <- sem(fullMedModel, data = keeley)
# Partially Mediated Model
partialMedModel <- '
firesev ~ age
cover ~ firesev + age
'
partialMedSEM <- sem(partialMedModel, data = keeley)
# Likelihood Ratio Test (nested models)
anova(partialMedSEM, fullMedSEM)
# AICc model comparison
aictab(
cand.set = list(fullMedSEM, partialMedSEM),
modnames = c("Full", "Partial")
)
# Partial Mediation Model
distModel <- '
rich ~ distance + abiotic + hetero
hetero ~ distance
abiotic ~ distance
'
distFit <- sem(distModel, data = keeley)
# Full Mediation Model
distMedModel <- '
rich ~ abiotic + hetero
hetero ~ distance
abiotic ~ distance
'
distMedFit <- sem(distMedModel, data = keeley)
# Compare models with LRT
anova(distFit, distMedFit)
# Compare with AICc
aictab(
cand.set = list(distMedFit, distFit),
modnames = c("Full", "Partial")
)
# Sample covariance matrix from Santos & Cannatella (2011)
# santosCov <- read.table("https://raw.githubusercontent.com/username/santosCov.txt", na.strings = #".")
#santosCov <- as.matrix(santosCov)
# Create covariance matrix manually (example values)
santosCov <- matrix(c(
1.00,  0.45, 0.38,
0.45,  1.00, 0.50,
0.38,  0.50, 1.00
), nrow = 3, byrow = TRUE)
# Add row and column names (must match your CFA model exactly)
colnames(santosCov) <- rownames(santosCov) <- c("Alkaloid.quantity", "Alkaloid.diversity", "Conspicuous.coloration")
# Specify CFA model
santosCFA1 <- '
Aposematism =~ Alkaloid.quantity + Alkaloid.diversity + Conspicuous.coloration
'
# Fit the model
santosFit1 <- sem(santosCFA1, sample.cov = santosCov, sample.nobs = 21)
summary(santosFit1, standardized = TRUE)
# Define the SEM
model <- '
# Measurement model
Performance =~ perf1 + perf2 + perf3
# Structural model
Performance ~ Treatment
'
# Simulate data
set.seed(123)
n <- 200
Treatment <- rnorm(n)
perf1 <- 0.6*Treatment + rnorm(n, sd = 1)
perf2 <- 0.6*Treatment + rnorm(n, sd = 1)
perf3 <- 0.6*Treatment + rnorm(n, sd = 1)
data <- data.frame(Treatment, perf1, perf2, perf3)
# Fit the SEM
fit <- sem(model, data = data)
summary(fit, standardized = TRUE)
library(piecewiseSEM)
# Now check if the functions are available
ls("package:piecewiseSEM")
# Simulate data
set.seed(123)
n <- 100
x <- rnorm(n)
y2 <- 0.5 * x + rnorm(n)
y1 <- 0.6 * x + 0.4 * y2 + rnorm(n)
example_data <- data.frame(x, y1, y2)
# Fit piecewise SEM
mod_list <- psem(
lm(y2 ~ x, data = example_data),
lm(y1 ~ x + y2, data = example_data)
)
# Test model fit using Fisher's C
fisherC(mod_list)
# Extract standardized coefficients
stdCoefs(mod_list)
dag <- getDAG(mod_list)
plot(dag)
# Define DAG
g <- dagitty("dag {
x -> y2 -> y1
x -> y1
}")
# View conditional independencies implied by the DAG
impliedConditionalIndependencies(g)
# Define DAG
g <- dagitty("dag {
x -> y2 -> y1
x -> y1
}")
# View conditional independencies implied by the DAG
impliedConditionalIndependencies(g)
library(piecewiseSEM)
# Simulate example data
set.seed(123)
n <- 100
x <- rnorm(n)
y2 <- 0.5 * x + rnorm(n)
y1 <- 0.6 * x + 0.4 * y2 + rnorm(n)
example_data <- data.frame(x, y1, y2)
# Fit piecewise SEM
mod_list <- psem(
lm(y2 ~ x, data = example_data),
lm(y1 ~ x + y2, data = example_data)
)
# ✅ Get model fit statistics (replaces sem.fit)
fisherC(mod_list)
# ✅ Get standardized path coefficients (replaces sem.coefs)
stdCoefs(mod_list)
# ✅ Optional: View DAG
plot(getDAG(mod_list))
# Load libraries
library(piecewiseSEM)
library(visreg)
library(DiagrammeR)
# Load sample data (or use your own)
data(keeley)  # from piecewiseSEM
# Fit individual models
mod1 <- lm(abiotic ~ distance, data = keeley)
mod2 <- lm(hetero ~ distance, data = keeley)
mod3 <- lm(rich ~ abiotic + hetero, data = keeley)
# Combine into a psem object
keeley_sem <- psem(mod1, mod2, mod3)
bookdown::render_book("index.Rmd")
# Coefficients
coefs(keeley_sem)
# R-squared values
rsquared(keeley_sem)
keeley_sem <- psem(
lm(firesev ~ age + cover, data = keeley),
lm(cover ~ age + elev + firesev, data = keeley),
data = keeley
)
plot(keeley_sem)
#Option B: Refined Graph with DiagrammeR
# Optional customization
plot(keeley_sem,
node_attrs = list(
x = c(2.5, 2.5, 4, 1),
y = c(3, 1, 2, 2),
shape = "rectangle",
fillcolor = "white"
))
mod_firesev  <- lm(firesev ~ age, data = keeley)
mod_cover    <- lm(cover ~ firesev, data = keeley)
firesev_model <- psem(mod_firesev, mod_cover)
summary(firesev_model)
dSep(firesev_model)
rsquared(firesev_model)
# Visualize fire severity's effect on cover
visreg(firesev_model[[2]], xvar = "firesev")
# Download data
url <- "https://drive.google.com/uc?export=download&id=1oHBul4_JcqlPFZgYsH3WOIZJRQRw1O4F"
cardinale <- read.csv(url)
# Check it loaded
head(cardinale)
# Log-transform variables
cardinale$logN <- log10(cardinale$N + 1e-6)
cardinale$logN2 <- cardinale$logN^2
cardinale$logChl <- log10(cardinale$Chl)
#Fit SEM with piecewiseSEM
model1 <- psem(
lm(SA ~ logN + logN2 + SR, data = cardinale),
lm(logChl ~ SA + logN + logN2, data = cardinale),
logN %~~% logN2,
data = cardinale
)
summary(model1)
model2 <- psem(
lm(SA ~ logN.cen + logN2.cen + SR, data = cardinale),
lm(logChl ~ SA + logN.cen + logN2.cen, data = cardinale),
logN.cen %~~% logN2.cen,
data = cardinale
)
summary(model2)
cardinale_model <- '
SA ~ logN.cen + logN2.cen + SR
logChl ~ SA + logN.cen + logN2.cen
logN.cen ~~ logN2.cen
'
cardinale_fit <- sem(cardinale_model, data = cardinale, fixed.x = FALSE)
bookdown::render_book("index.Rmd")
url2 <- "https://drive.google.com/uc?export=download&id=1YTsFP1T__Hn13hTvj9TVOK-wbGDxLd01"
# Try to read the CSV directly
keeley <- read.csv(url2)
keeley$age_cent <- scale(keeley$age, scale = FALSE)
keeley$fire_cent <- scale(keeley$firesev, scale = FALSE)
keeley$int_term <- keeley$age_cent * keeley$fire_cent
keeley_int <- psem(
lm(cover ~ age_cent * fire_cent, data = keeley),
lm(fire_cent ~ age_cent, data = keeley),
data = keeley
)
summary(keeley_int)
lavaan_model <- '
fire_cent ~ age_cent
cover ~ fire_cent + age_cent + fire_cent:age_cent
'
lavaan_fit <- sem(lavaan_model, data = keeley)
summary(lavaan_fit)
bookdown::render_book("index.Rmd")
library(lavaan)
# Create simulated dataset
group_df <- data.frame(
site = rep(c("A", "B"), each = 50),
x = rnorm(100),
m = rnorm(100),
y = rnorm(100)
)
# Define a simple SEM model
sem_model <- '
m ~ a*x
y ~ b*m + c*x
'
# Fit multi-group SEM
fit_multi <- lavaan::sem(sem_model, data = group_df, group = "site")
# View summary
summary(fit_multi, fit.measures = TRUE, standardized = TRUE)
# Fit unconstrained multi-group model
fit_multi <- sem(sem_model, data = group_data, group = "site")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
library(dagitty)
library(ggdag)
library(tidyverse)
# Define the DAG
ivm_dag <- dagitty("
dag {
Treatment
Soil_Substrate
Cattle
Plant_Richness
Plant_Cover
Plant_Height
Ceanothus
Woody_Debris
Pollinator_Richness
Pollinator_Abundance
Treatment -> Plant_Richness
Treatment -> Plant_Cover
Treatment -> Plant_Height
Treatment -> Ceanothus
Treatment -> Woody_Debris
Soil_Substrate -> Treatment
Soil_Substrate -> Plant_Richness
Soil_Substrate -> Plant_Cover
Soil_Substrate -> Woody_Debris
Cattle -> Plant_Richness
Cattle -> Plant_Cover
Cattle -> Pollinator_Abundance
Cattle -> Pollinator_Richness
Plant_Richness -> Pollinator_Richness
Plant_Richness -> Pollinator_Abundance
Plant_Cover -> Pollinator_Richness
Plant_Cover -> Pollinator_Abundance
Plant_Height -> Pollinator_Richness
Plant_Height -> Pollinator_Abundance
Ceanothus -> Pollinator_Richness
Ceanothus -> Pollinator_Abundance
Woody_Debris -> Pollinator_Richness
Woody_Debris -> Pollinator_Abundance
}
")
node_roles <- tibble(
name = c(
"Treatment",
"Soil_Substrate",
"Cattle",
"Plant_Richness",
"Plant_Cover",
"Plant_Height",
"Ceanothus",
"Woody_Debris",
"Pollinator_Richness",
"Pollinator_Abundance"
),
role = c(
"Treatment",
"Context",
"Context",
"Plant",
"Plant",
"Plant",
"Plant",
"Plant",
"Pollinator",
"Pollinator"
)
)
# Get layout and merge roles
dag_df <- tidy_dagitty(ivm_dag, layout = "nicely") %>%
left_join(node_roles, by = "name")
# Plot using ggplot2 with corrected edge structure
ggplot() +
geom_segment(
data = dag_df %>% filter(!is.na(xend)),
aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.02, "npc")),
color = "grey40"
) +
geom_point(
data = dag_df %>% filter(!is.na(x)),
aes(x = x, y = y, color = role),
size = 8, alpha = 0.85
) +
geom_text(
data = dag_df %>% filter(!is.na(x)),
aes(x = x, y = y, label = name),
color = "black", size = 4
) +
scale_color_manual(values = c(
"Treatment" = "#FB7E21FF",
"Context" = "#A91601FF",
"Plant" = "#18DDC2FF",
"Pollinator" = "#00468BFF"
)) +
labs(
title = "Hypothesized DAG for Pollinator Response to IVM Treatment",
color = "Variable Type"
) +
theme_void()
adjustmentSets(ivm_dag, exposure = "Treatment", outcome = "Pollinator_Richness")
adjustmentSets(ivm_dag, exposure = "Treatment", outcome = "Pollinator_Abundance")
library(piecewiseSEM)
version
